
    /**
     * Definition for a binary tree node.
     * public class TreeNode {
     * int val;
     * TreeNode left;
     * TreeNode right;
     * TreeNode() {}
     * TreeNode(int val) { this.val = val; }
     * TreeNode(int val, TreeNode left, TreeNode right) {
     * this.val = val;
     * this.left = left;
     * this.right = right;
     * }
     * }
     */
    class Solution {
        public TreeNode buildTree(int[] inorder, int[] postorder) {
            // 中序遍历 左根右   后序遍历 左右根
            return  buildTreeDeal(inorder, 0, inorder.length - 1, postorder, 0, postorder.length - 1);
        }

        private TreeNode buildTreeDeal(int[] inorder, int inStart, int inEnd, int[] postorder, int postStart, int postEnd) {
            if (inStart > inEnd) return null;

            int rootValue = postorder[postEnd];
            int index = 0;
            for (int i = inStart; i <= inEnd; i++) {
                if (inorder[i] == rootValue) {
                    index = i;
                    break;
                }
            }
            int leftLength = index - inStart;
            TreeNode root = new TreeNode(rootValue);
            root.left = buildTreeDeal(inorder, inStart, index - 1, postorder, postStart, leftLength + postStart - 1);
            root.right = buildTreeDeal(inorder, index + 1, inEnd, postorder, leftLength + postStart, postEnd - 1);
            return root;
        }
    }

//runtime:3 ms
//memory:38.1 MB
